module.exports = {
    //source-map 	在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的source map，但是它会减慢打包速度；
    //cheap-module-source-map 	在一个单独的文件中生成一个不带列映射的map，不带列映射提高了打包速度，但是也使得浏览器开发者工具只能对应到具体的行，不能对应到具体的列（符号），会对调试造成不便；
    //eval-source-map 	使用eval打包源文件模块，在同一个文件中生成干净的完整的source map。这个选项可以在不影响构建速度的前提下生成完整的sourcemap，但是对打包后输出的JS文件的执行具有性能和安全的隐患。在开发阶段这是一个非常好的选项，在生产阶段则一定不要启用这个选项；
    //cheap-module-eval-source-map 	这是在打包文件时最快的生成source map的方法，生成的Source Map 会和打包后的JavaScript文件同行显示，没有列映射，和eval-source-map选项具有相似的缺点；

    // /cheap-module-eval-source-map方法构建速度更快，但是不利于调试，推荐在大型项目考虑时间成本时使用。
    //? 对小到中型的项目中， eval - source - map是一个很好的选项， 再次强调你只应该开发阶段使用它
    devtool: 'eval-source-map',
    //“__dirname”是node.js中的一个全局变量，它指向当前执行脚本所在的目录
    entry: __dirname + "/app/main.js",
    //已多次提及的唯一入口文件 
    output: {
        path: __dirname + "/public",
        //打包后的文件存放的地方 
        filename: "bundle-[hash].js" //打包后输出文件的文件名
    },

    devServer: {
        contentBase: "./public", //本地服务器所加载的页面所在的目录
        historyApiFallback: true, //不跳转
        inline: true //实时刷新
    }
}